1일차.

 # MVC

Model-View-Controller : Model에 data를 View에 보이도록 Control하는 것이다.

Model : data와 관련된 것.
View : 눈에 보이는 것. ( HTML, CSS )
Controller : 제어하는 것. 


 # Library와 Framework.

Library : 만들어진 벽돌, 기둥, 바닥, 천장 등 하나의 구조화된 요소들이다.
Framework : 만들어진 집의 형태라고 할 수 있다. ( 요소보다 좀 더 구체적으로 설계 된 것이다 )


 # Java web Program.

Servlet -> JSP -> JSP MVC -> Spring MVC.


 # 웹 서버 프로그램.

과거의 데이터 전송방법.
클라이언트 프로그램으로 서버 프로그램에 요청을 하고 서버프로그램에서 요청에 응답을 보내준다.
=>서버 프로그램을 업데이트하면 클라이언트 프로그램도 업데이트 해야 되는 등의 문제점 발생.

여러 문제점을 해결방법 중에 하나로 웹 서버 프로그램이 등장했다.

웹 서버 프로그램.
클라이언트는 웹으로 요청을 하고 서버 프로그램은 웹의 요청을 받아 응답을 웹에 보내준다. ( 동적 서버 프로그램 )
=> 클라이언트에 따로 프로그램을 설치하지 않아도 된다.

웹 기준으로 나누는 개발자.
프론트엔드 개발자 : 웹 부분과 관련된 개발자.
백엔드 개발자 : 웹서버와 관련된 개발자. 


 # 웹 서버 프로그램과 Servlet.

WEB Server : Web에 요청을 받고, WAS에게 응답을 받아 다시 Web에게 전달. ( 중간 다리 역할 )
WAS (Web Application Server) : Server App code를 실행하여 동적인 응답 Web Server에게 전달.

Server App : WEB Server에서 받아들인 요청에 대한 반응으로 WAS에서 실행되어 동적인 응답을 하게한다.

Servlet : Server App을 조각낸 것이 아닐까라고 생각.


 # Apache Tomcat. ( WAS이다 )

Tomcat : WAS + WEB Server. ( 두 가지 기능을 가지고 있다 )

인스톨 관련.
apache tomcat -> 64-bit Windows.zip download -> 압축풀기 ( 64bit )
32-bit/64-bit Windows Service Installer ( 컴퓨터를 실행하면 알아서 tomcat이 실행되는 Home Server를 구축할때 사용 )

실행 관련.
Java_Home 환경변수를 등록해야 사용가능하다. ( tomcat은 jdk를 사용한다 )
다른 Server 프로그램이 실행되는지 확인해야 된다. ( port 충돌이 일어날 수 있다 )
bin -> startup.bat실행. 

실행.
localhost:8080 -> 실행되면 완료.


 # Tomcat으로 웹문서 사용하기.

ROOT : Home directory. ( port에 접속했을때 나오는 page )

1. 문서추가하기.
webapps -> ROOT -> 문서 추가.

2. 사용하기.
localhost:8080/ -> ROOT directory를 표시. ( '/' 는 생략가능 )
localhost:8080/filename -> 실행완료. ( 문서저장이나 url명을 실수하면, 404 error가 발생 )

3. 다른 기기로 사용하기.
ip_address:8080/ -> ROOT directory.
ip_address:8080/filename -> 다른기기로 문서보기.











